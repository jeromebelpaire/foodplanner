# Generated by Django 4.1.4 on 2024-09-09 20:07

from django.db import migrations, models
import django.db.models.deletion


def create_unique_ingredients_and_populate_recipeingredient(apps, schema_editor):
    Ingredient = apps.get_model("recipes", "Ingredient")
    Recipe = apps.get_model("recipes", "Recipe")
    RecipeIngredient = apps.get_model("recipes", "RecipeIngredient")

    unique_ingredients = {}
    ids_to_delete = []

    for old_ingredient in Ingredient.objects.all():
        key = (old_ingredient.name, old_ingredient.unit)
        if key not in unique_ingredients:
            # Create and save new unique ingredient
            # new_ingredient = Ingredient.objects.create(name=old_ingredient.name, unit=old_ingredient.unit)
            unique_ingredients[key] = old_ingredient.id
        else:
            # This old ingredient is a duplicate and should be deleted
            ids_to_delete.append(old_ingredient.id)

        # Link the unique ingredient with the recipe
        RecipeIngredient.objects.create(
            recipe=old_ingredient.recipe, ingredient_id=unique_ingredients[key], quantity=old_ingredient.quantity
        )

    # Safely delete only the redundant old ingredients
    Ingredient.objects.filter(id__in=ids_to_delete).delete()


def remove_old_ingredient_links(apps, schema_editor):
    Ingredient = apps.get_model("recipes", "Ingredient")
    # If old ingredients are to be removed or modified further, implement here
    # For example, removing old fields:
    Ingredient.objects.all().update(recipe=None)


class Migration(migrations.Migration):

    dependencies = [
        ("recipes", "0009_ingredient_unit"),
    ]

    operations = [
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.FloatField()),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="recipes.ingredient",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="recipes.recipe"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="recipe",
            name="ingredients",
            field=models.ManyToManyField(through="recipes.RecipeIngredient", to="recipes.ingredient"),
        ),
        migrations.RunPython(
            create_unique_ingredients_and_populate_recipeingredient, reverse_code=migrations.RunPython.noop
        ),
        migrations.RemoveField(
            model_name="ingredient",
            name="quantity",
        ),
        migrations.RemoveField(
            model_name="ingredient",
            name="recipe",
        ),
        migrations.AlterField(
            model_name="plannedrecipe",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="plannedrecipes",
                to="recipes.recipe",
            ),
        ),
    ]
